package com.infosys.kafka;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.infosys.kafka.model.Feed;
import com.infosys.kafka.producer.LoggingStudentWriter;
import com.infosys.kafka.producer.RssFeedProducer;
import com.infosys.kafka.producer.RssFeedReader;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

	@Autowired
	public JobBuilderFactory jobBuilderFactory;

	@Autowired
	public StepBuilderFactory stepBuilderFactory;

	@Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;
	
	@Bean
	public RssFeedReader reader() {
		return new RssFeedReader();
	}

	@Bean
	public RssFeedProducer writer() {;
		return new RssFeedProducer();
	}
	

	@Bean
	public Job importUserJob(Step step1) {
		return jobBuilderFactory.get("importUserJob")
				.incrementer(new RunIdIncrementer())
				.flow(step1)
				.end()
				.build();
	}

	@Bean
	public Step step1(ItemReader<Feed> reader,
					ItemWriter<Feed> writer) {
		return stepBuilderFactory.get("step1")
				.<Feed, Feed> chunk(1)
				.reader(reader)
				.writer(writer)
				.build();
	}
}
